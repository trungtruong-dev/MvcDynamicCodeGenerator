@model MvcDynamicCodeGenerator.Models.SchemaGeneratorViewModel
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Linq
@using MvcDynamicCodeGenerator.Models // For Enum CodeGenerationStyle

@{
    ViewData["Title"] = "Công Cụ Tạo Schema, Model & Service EF Core"; // Updated title

    var dataTypeOptions = new List<SelectListItem>
    {
        new SelectListItem { Value = "string", Text = "string" }, new SelectListItem { Value = "int", Text = "int" },
        new SelectListItem { Value = "long", Text = "long" }, new SelectListItem { Value = "bool", Text = "bool" },
        new SelectListItem { Value = "DateTime", Text = "DateTime" }, new SelectListItem { Value = "decimal", Text = "decimal" },
        new SelectListItem { Value = "Guid", Text = "Guid" }, new SelectListItem { Value = "double", Text = "double" },
        new SelectListItem { Value = "float", Text = "float" }, new SelectListItem { Value = "byte[]", Text = "byte[] (binary)" }
    };
    var dataTypeOptionsHtml = "";
    foreach (var option in dataTypeOptions)
    {
        dataTypeOptionsHtml += $"<option value=\"{option.Value}\">{option.Text}</option>";
    }

    var deleteBehaviorOptions = new List<SelectListItem>
    {
        new SelectListItem { Value = "", Text = "Mặc định EF Core" },
        new SelectListItem { Value = "Cascade", Text = "Cascade" },
        new SelectListItem { Value = "ClientSetNull", Text = "ClientSetNull (Khóa ngoại Nullable)" },
        new SelectListItem { Value = "Restrict", Text = "Restrict" },
        new SelectListItem { Value = "NoAction", Text = "NoAction" }
    };
    var deleteBehaviorOptionsHtml = "";
    foreach (var option in deleteBehaviorOptions)
    {
        deleteBehaviorOptionsHtml += $"<option value=\"{option.Value}\">{option.Text}</option>";
    }
}

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" xintegrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<style>
    /* CSS của bạn */
    .table-def { border: 1px solid #ddd; padding: 15px; margin-bottom: 20px; border-radius: 5px; background-color: #f9f9f9; }
    .property-def { padding: 10px; border: 1px solid #eee; margin-bottom: 10px; background-color: #fff; overflow: visible; }
    .property-def .card-header { padding: 0.5rem 1rem; background-color: #f8f9fa; cursor: pointer; display: flex; align-items: center; justify-content: space-between; }
    .property-def .card-header:hover { background-color: #e9ecef; }
    .property-def .card-header .row { flex-grow: 1; }
    .property-def .card-body { padding: 1rem; }
    .grab-handle { cursor: grab; }
    .property-def .card-header .form-check { margin-bottom: 0 !important; padding-left: 1.5em; }
    .fk-options, .adv-options { margin-top: 0.5rem; padding-left: 15px; border-left: 2px solid #007bff; }
    .accordion-button:not(.collapsed) { color: #0c63e4; background-color: #e7f1ff; }
    .property-def .card-header .select2-container { width: 100% !important; margin-bottom: 0; }
    .validation-prop-group, .config-prop-group { margin-top: 0.5rem; }
    .prop-col { margin-bottom: 0.5rem; }
    #jobStatus { margin-top: 15px; padding: 10px; border: 1px solid #ccc; border-radius: 4px; background-color: #f0f0f0; }
    .status-processing { color: orange; }
    .status-completed { color: green; }
    .status-failed { color: red; } /* Changed from status-error to status-failed to match JS */
    .card { box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); border-radius: 0.375rem; border: none; }
    .table-def { background-color: #fdfdfd; }
    .table-def .card-header.bg-light { background-color: #f8f9fa !important; border-bottom: 1px solid #eff2f5; }
    .property-def .card-header { padding: 0.65rem 1rem; transition: background-color 0.2s ease-in-out; }
    .property-def .card-header .form-control-sm, .property-def .card-header .form-select-sm { font-size: 0.85rem; }
    .property-def .card-header .form-check-label { font-size: 0.85rem; padding-top: 0.1rem; }
    .property-def .grab-handle { color: #adb5bd; margin-right: 0.75rem !important; }
    .property-def .accordion .accordion-item { border-color: #e9ecef; }
    .property-def .accordion .accordion-button { padding: 0.75rem 1.25rem; font-size: 0.9rem; font-weight: 500; }
    .property-def .accordion .accordion-button:not(.collapsed) { background-color: #f0f6ff; color: #0759ce; box-shadow: none; }
    .property-def .accordion .accordion-body { padding: 1rem 1.25rem; background-color: #fcfdff; }
    .btn { transition: all 0.2s ease-in-out; letter-spacing: 0.025em; }
    .btn-outline-danger:hover, .btn-outline-primary:hover, .btn-outline-info:hover { color: #fff !important; }
    #jobStatus { margin-top: 25px; padding: 20px; border: 1px solid #dee2e6; border-radius: 0.375rem; background-color: #f8f9fa; box-shadow: 0 2px 8px rgba(0,0,0,0.06); }
    #jobStatus h4 { margin-bottom: 1rem; font-weight: 500; color: #212529; }
    #jobStatus #statusMessage { font-size: 1rem; margin-bottom: 1.25rem; font-weight: 500; }
    #jobStatus .progress { height: 1.25rem; font-size: 0.8rem; margin-bottom: 1.25rem; border-radius: 0.375rem; }
    #jobStatus #downloadLink.btn { font-weight: 500; padding: 0.5rem 1rem; }

    .config-section {
        border: 1px solid #e0e0e0;
        padding: 1.25rem;
        margin-bottom: 1.5rem;
        border-radius: 0.375rem;
        background-color: #f8f9fa;
    }
    .config-section h4 {
        color: #007bff;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #007bff;
    }
</style>

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white"><h2 class="mb-0">@ViewData["Title"]</h2></div>
        <div class="card-body">
            <p class="card-text">Định nghĩa cấu trúc database, công cụ sẽ tạo Model, DbContext, Repository, Service và các thành phần liên quan.</p>
            <hr />
            <form id="generateSchemaForm" asp-action="GenerateSchema" method="post">
                @Html.AntiForgeryToken()
                <div class="mb-3">
                    <button type="button" id="viewDiagramBtn" class="btn btn-outline-secondary"><i class="fas fa-project-diagram me-1"></i>Xem Sơ đồ CSDL</button>
                </div>
                <div id="diagramContainer" class="mermaid mb-4" style="display:none; border: 1px solid #ddd; padding: 15px; border-radius: 5px; background-color: #fff;"></div>

                <div asp-validation-summary="All" class="alert alert-danger" role="alert" style="@(ViewContext.ModelState.IsValid ? "display:none;" : "")"></div>

                @* Global Options Section *@
                <section class="config-section">
                    <h4><i class="fas fa-cogs me-2"></i>Tùy Chọn Chung</h4>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label asp-for="RootNamespace" class="form-label fw-bold"></label>
                            <input asp-for="RootNamespace" class="form-control" />
                            <span asp-validation-for="RootNamespace" class="text-danger"></span>
                        </div>
                        <div class="col-md-4">
                            <label asp-for="DbContextName" class="form-label fw-bold"></label>
                            <input asp-for="DbContextName" class="form-control" />
                            <span asp-validation-for="DbContextName" class="text-danger"></span>
                        </div>
                        <div class="col-md-4">
                            <label asp-for="ConfigurationStyle" class="form-label fw-bold"></label>
                            <select asp-for="ConfigurationStyle" asp-items="Html.GetEnumSelectList<CodeGenerationStyle>()" class="form-select"></select>
                        </div>
                    </div>
                     <div class="row mb-3">
                        <div class="col-md-3">
                            <div class="form-check form-switch">
                                <input asp-for="GenerateIServices" class="form-check-input" type="checkbox" />
                                <label asp-for="GenerateIServices" class="form-check-label"></label>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check form-switch">
                                <input asp-for="GenerateServices" class="form-check-input" type="checkbox" />
                                <label asp-for="GenerateServices" class="form-check-label"></label>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check form-switch">
                                <input asp-for="AsyncServiceOnly" class="form-check-input" type="checkbox" />
                                <label asp-for="AsyncServiceOnly" class="form-check-label"></label>
                            </div>
                        </div>
                         <div class="col-md-3">
                            <div class="form-check form-switch">
                                <input asp-for="GenerateUnitTests" class="form-check-input" type="checkbox" />
                                <label asp-for="GenerateUnitTests" class="form-check-label"></label>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-check form-switch">
                                <input asp-for="EnableSoftDeleteGlobally" class="form-check-input" type="checkbox" />
                                <label asp-for="EnableSoftDeleteGlobally" class="form-check-label"></label>
                            </div>
                        </div>
                         <div class="col-md-4">
                            <div class="form-check form-switch">
                                <input asp-for="GenerateDependencyInjectionExtensions" class="form-check-input" type="checkbox" />
                                <label asp-for="GenerateDependencyInjectionExtensions" class="form-check-label"></label>
                            </div>
                        </div>
                    </div>
                </section>

                @* Naming Convention Options Section *@
                <section class="config-section">
                    <h4><i class="fas fa-signature me-2"></i>Tùy Chọn Đặt Tên</h4>
                    <div class="row">
                        @* EntityNameSuffix input is removed *@
                        <div class="col-md-3 mb-2">
                            <label asp-for="NamingConventions.RepositoryInterfacePrefix" class="form-label"></label>
                            <input asp-for="NamingConventions.RepositoryInterfacePrefix" class="form-control form-control-sm" placeholder="Mặc định: I" />
                        </div>
                        <div class="col-md-3 mb-2">
                            <label asp-for="NamingConventions.RepositoryClassSuffix" class="form-label"></label>
                            <input asp-for="NamingConventions.RepositoryClassSuffix" class="form-control form-control-sm" placeholder="Mặc định: Repository" />
                        </div>
                         <div class="col-md-3 mb-2">
                            <label asp-for="NamingConventions.ServiceInterfacePrefix" class="form-label"></label>
                            <input asp-for="NamingConventions.ServiceInterfacePrefix" class="form-control form-control-sm" placeholder="Mặc định: I" />
                        </div>
                        <div class="col-md-3 mb-2">
                            <label asp-for="NamingConventions.ServiceClassSuffix" class="form-label"></label>
                            <input asp-for="NamingConventions.ServiceClassSuffix" class="form-control form-control-sm" placeholder="Mặc định: Service" />
                        </div>
                    </div>
                </section>

                <hr />
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="tableSearchInput" class="form-label">Tìm kiếm Bảng:</label>
                        <input type="text" id="tableSearchInput" class="form-control" placeholder="Nhập tên bảng để lọc...">
                    </div>
                </div>

                <div id="tablesContainer">
                    @for (int i = 0; i < Model.Tables.Count; i++)
                    {
                        var table = Model.Tables[i];
                        <div class="card table-def mb-4" data-table-index="@i">
                            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                <h4 class="mb-0">Bảng @(i + 1): <span class="table-name-display fw-normal">@(table.TableName ?? $"Bảng {i + 1}")</span></h4>
                                <button type="button" class="btn btn-sm btn-outline-danger remove-table-btn" disabled><i class="fas fa-trash-alt me-1"></i>Xóa Bảng</button>
                            </div>
                            <div class="card-body">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="Tables_@(i)__TableName" class="form-label">Tên Bảng</label>
                                        <input type="text" id="Tables_@(i)__TableName" name="Tables[@i].TableName" value="@table.TableName" class="form-control table-name-input" placeholder="Products" />
                                        <span asp-validation-for="Tables[i].TableName" class="text-danger"></span>
                                    </div>
                                     <div class="col-md-6 d-flex align-items-end">
                                        <div class="form-check form-switch">
                                            <input id="Tables_@(i)__EnableSoftDelete_Checkbox" name="Tables[@i].EnableSoftDelete" class="form-check-input" type="checkbox" value="true" @(table.EnableSoftDelete == true ? "checked" : "") />
                                            <input type="hidden" name="Tables[@i].EnableSoftDelete" value="false" class="softdelete-hidden-false-value" @(table.EnableSoftDelete == true ? "disabled" : "") />
                                            <label for="Tables_@(i)__EnableSoftDelete_Checkbox" class="form-check-label">Bật Soft Delete cho bảng này (ghi đè tùy chọn chung)</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-3 mb-2">
                                    <div class="col-md-6"><h5 class="mb-0">Thuộc tính:</h5></div>
                                    <div class="col-md-6">
                                        <input type="text" class="form-control form-control-sm property-search-input" placeholder="Tìm thuộc tính trong bảng này..." data-table-index="@i">
                                    </div>
                                </div>
                                <div class="properties-container" data-table-index="@i" id="tablesContainer_@(i)_PropertiesContainer">
                                    @for (int j = 0; j < table.Properties.Count; j++)
                                    {
                                        var prop = table.Properties[j];
                                        var baseId = $"Tables_{i}__Properties_{j}__";
                                        var accordionParentId = $"accordionProperty_{i}_{j}";
                                        var propertyCardId = $"propertyDef_{i}_{j}";
                                        var mainCollapseId = $"collapseProperty_{i}_{j}";
                                        var mainHeadingId = $"headingProperty_{i}_{j}";

                                        <div class="card property-def mb-3" data-property-index="@j" id="@propertyCardId">
                                            <div class="card-header" id="@mainHeadingId" data-bs-toggle="collapse" data-bs-target="#@mainCollapseId" aria-expanded="false" aria-controls="@mainCollapseId">
                                                <i class="fas fa-grip-vertical grab-handle me-2"></i>
                                                <div class="row flex-grow-1 align-items-center g-2">
                                                    <div class="col-md-4 col-sm-6 prop-col">
                                                        <label for="@(baseId)PropertyName" class="form-label visually-hidden">Tên</label>
                                                        <input type="text" id="@(baseId)PropertyName" name="Tables[@i].Properties[@j].PropertyName" class="form-control form-control-sm" value="@prop.PropertyName" placeholder="Tên Thuộc Tính" />
                                                        <span asp-validation-for="Tables[i].Properties[j].PropertyName" class="text-danger"></span>
                                                    </div>
                                                    <div class="col-md-3 col-sm-6 prop-col">
                                                        <label for="@(baseId)DataType" class="form-label visually-hidden">Kiểu</label>
                                                        <select id="@(baseId)DataType" name="Tables[@i].Properties[@j].DataType" asp-for="@prop.DataType" asp-items="dataTypeOptions" class="form-select form-select-sm data-type-selector"></select>
                                                        <span asp-validation-for="Tables[i].Properties[j].DataType" class="text-danger"></span>
                                                    </div>
                                                    <div class="col-md-2 col-sm-4 prop-col">
                                                        <div class="form-check form-switch">
                                                            <input id="@(baseId)IsPrimaryKey" name="Tables[@i].Properties[@j].IsPrimaryKey" class="form-check-input" type="checkbox" @(prop.IsPrimaryKey ? "checked" : "") value="true" />
                                                            <input type="hidden" name="Tables[@i].Properties[@j].IsPrimaryKey" value="false" />
                                                            <label for="@(baseId)IsPrimaryKey" class="form-check-label">PK?</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-2 col-sm-4 prop-col">
                                                        <div class="form-check form-switch">
                                                            <input id="@(baseId)IsNullable" name="Tables[@i].Properties[@j].IsNullable" class="form-check-input" type="checkbox" @(prop.IsNullable ? "checked" : "") value="true" />
                                                            <input type="hidden" name="Tables[@i].Properties[@j].IsNullable" value="false" />
                                                            <label for="@(baseId)IsNullable" class="form-check-label">Null?</label>
                                                        </div>
                                                    </div>
                                                </div>
                                                <button type="button" class="btn btn-sm btn-outline-danger remove-property-btn ms-2" @(table.Properties.Count <= 1 ? "disabled" : "")><i class="fas fa-times"></i></button>
                                            </div>
                                            <div id="@mainCollapseId" class="card-body accordion-collapse collapse" aria-labelledby="@mainHeadingId" data-bs-parent="#tablesContainer_@(i)_PropertiesContainer">
                                                <div class="accordion mt-3" id="@accordionParentId">
                                                    <div class="accordion-item">
                                                        <h2 class="accordion-header" id="headingFk_@(i)_@(j)">
                                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFk_@(i)_@(j)" aria-expanded="@(prop.IsForeignKey ? "true" : "false")" aria-controls="collapseFk_@(i)_@(j)">
                                                                Khóa Ngoại & Điều Hướng
                                                            </button>
                                                        </h2>
                                                        <div id="collapseFk_@(i)_@(j)" class="accordion-collapse collapse @(prop.IsForeignKey ? "show" : "")" aria-labelledby="headingFk_@(i)_@(j)" data-bs-parent="#@accordionParentId">
                                                            <div class="accordion-body">
                                                                <div class="form-check form-switch">
                                                                    <input id="@(baseId)IsForeignKey" name="Tables[@i].Properties[@j].IsForeignKey" class="form-check-input fk-checkbox" type="checkbox" @(prop.IsForeignKey ? "checked" : "") value="true" data-table-index="@i" data-property-index="@j" />
                                                                    <input type="hidden" name="Tables[@i].Properties[@j].IsForeignKey" value="false" />
                                                                    <label for="@(baseId)IsForeignKey" class="form-check-label">Là Khóa Ngoại?</label>
                                                                </div>
                                                                <div class="fk-options mt-2" style="@(prop.IsForeignKey ? "" : "display:none;")" id="fkOptions_@(i)_@(j)">
                                                                    <div class="row g-2">
                                                                        <div class="col-md-6">
                                                                            <label for="@(baseId)ReferencedTableName" class="form-label">Bảng Tham Chiếu</label>
                                                                            <select id="@(baseId)ReferencedTableName" name="Tables[@i].Properties[@j].ReferencedTableName" asp-for="@prop.ReferencedTableName" class="form-select form-select-sm referenced-table-dropdown">
                                                                                <option value="">-- Chọn Bảng --</option>
                                                                            </select>
                                                                        </div>
                                                                        <div class="col-md-6">
                                                                            <label for="@(baseId)NavigationPropertyName" class="form-label">Tên Thuộc Tính Điều Hướng</label>
                                                                            <input type="text" id="@(baseId)NavigationPropertyName" name="Tables[@i].Properties[@j].NavigationPropertyName" class="form-control form-control-sm nav-prop-name-input" value="@prop.NavigationPropertyName" placeholder="Tự động nếu trống" />
                                                                        </div>
                                                                         <div class="col-md-6">
                                                                            <label for="@(baseId)DeleteBehavior" class="form-label">Hành vi khi Xóa (FK)</label>
                                                                            <select id="@(baseId)DeleteBehavior" name="Tables[@i].Properties[@j].DeleteBehavior" asp-for="@prop.DeleteBehavior" asp-items="deleteBehaviorOptions" class="form-select form-select-sm delete-behavior-selector"></select>
                                                                        </div>
                                                                        <div class="col-md-6">
                                                                            <label for="@(baseId)CustomFKConstraintName" class="form-label">Tên Ràng Buộc FK (DB)</label>
                                                                            <input type="text" id="@(baseId)CustomFKConstraintName" name="Tables[@i].Properties[@j].CustomFKConstraintName" class="form-control form-control-sm" value="@prop.CustomFKConstraintName" placeholder="Mặc định EF Core" />
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="accordion-item">
                                                        <h2 class="accordion-header" id="headingValidation_@(i)_@(j)">
                                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseValidation_@(i)_@(j)" aria-expanded="false" aria-controls="collapseValidation_@(i)_@(j)">
                                                                Tùy Chọn Xác Thực (Validation)
                                                            </button>
                                                        </h2>
                                                        <div id="collapseValidation_@(i)_@(j)" class="accordion-collapse collapse" aria-labelledby="headingValidation_@(i)_@(j)" data-bs-parent="#@accordionParentId">
                                                            <div class="accordion-body">
                                                                <div class="row validation-prop-group g-2">
                                                                    <div class="col-md-3 prop-col string-validation" style="@(prop.DataType == "string" ? "" : "display:none;")">
                                                                        <label for="@(baseId)MaxLength" class="form-label">Độ dài Max (String)</label>
                                                                        <input type="number" min="1" id="@(baseId)MaxLength" name="Tables[@i].Properties[@j].MaxLength" class="form-control form-control-sm" value="@prop.MaxLength" placeholder="Ví dụ: 255" />
                                                                    </div>
                                                                    <div class="col-md-3 prop-col string-validation" style="@(prop.DataType == "string" ? "" : "display:none;")">
                                                                        <label for="@(baseId)MinLength" class="form-label">Độ dài Min (String)</label>
                                                                        <input type="number" min="0" id="@(baseId)MinLength" name="Tables[@i].Properties[@j].MinLength" class="form-control form-control-sm" value="@prop.MinLength" placeholder="Ví dụ: 0" />
                                                                    </div>
                                                                    <div class="col-md-3 prop-col numeric-validation" style="@(new[] {"int", "long", "decimal", "double", "float"}.Contains(prop.DataType) ? "" : "display:none;")">
                                                                        <label for="@(baseId)RangeMin" class="form-label">Giá trị Min (Số)</label>
                                                                        <input type="number" step="any" id="@(baseId)RangeMin" name="Tables[@i].Properties[@j].RangeMin" class="form-control form-control-sm" value="@prop.RangeMin" placeholder="Ví dụ: 0" />
                                                                    </div>
                                                                    <div class="col-md-3 prop-col numeric-validation" style="@(new[] {"int", "long", "decimal", "double", "float"}.Contains(prop.DataType) ? "" : "display:none;")">
                                                                        <label for="@(baseId)RangeMax" class="form-label">Giá trị Max (Số)</label>
                                                                        <input type="number" step="any" id="@(baseId)RangeMax" name="Tables[@i].Properties[@j].RangeMax" class="form-control form-control-sm" value="@prop.RangeMax" placeholder="Ví dụ: 100" />
                                                                    </div>
                                                                </div>
                                                                <div class="row validation-prop-group mt-2 g-2">
                                                                    <div class="col-md-3 col-sm-6 prop-col">
                                                                        <div class="form-check form-switch">
                                                                            <input id="@(baseId)IsEmailAddress" name="Tables[@i].Properties[@j].IsEmailAddress" class="form-check-input" type="checkbox" @(prop.IsEmailAddress ? "checked" : "") value="true" />
                                                                            <input type="hidden" name="Tables[@i].Properties[@j].IsEmailAddress" value="false" />
                                                                            <label for="@(baseId)IsEmailAddress" class="form-check-label">Là Email?</label>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-3 col-sm-6 prop-col">
                                                                        <div class="form-check form-switch">
                                                                            <input id="@(baseId)IsPhoneNumber" name="Tables[@i].Properties[@j].IsPhoneNumber" class="form-check-input" type="checkbox" @(prop.IsPhoneNumber ? "checked" : "") value="true" />
                                                                            <input type="hidden" name="Tables[@i].Properties[@j].IsPhoneNumber" value="false" />
                                                                            <label for="@(baseId)IsPhoneNumber" class="form-check-label">Là SĐT?</label>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-3 col-sm-6 prop-col">
                                                                        <div class="form-check form-switch">
                                                                            <input id="@(baseId)IsUrl" name="Tables[@i].Properties[@j].IsUrl" class="form-check-input" type="checkbox" @(prop.IsUrl ? "checked" : "") value="true" />
                                                                            <input type="hidden" name="Tables[@i].Properties[@j].IsUrl" value="false" />
                                                                            <label for="@(baseId)IsUrl" class="form-check-label">Là URL?</label>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-3 col-sm-6 prop-col">
                                                                        <label for="@(baseId)RegexPattern" class="form-label">Regex Pattern</label>
                                                                        <input type="text" id="@(baseId)RegexPattern" name="Tables[@i].Properties[@j].RegexPattern" class="form-control form-control-sm" value="@prop.RegexPattern" placeholder="Ví dụ: ^[a-z0-9]+$" />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="accordion-item">
                                                        <h2 class="accordion-header" id="headingConfig_@(i)_@(j)">
                                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseConfig_@(i)_@(j)" aria-expanded="false" aria-controls="collapseConfig_@(i)_@(j)">
                                                                Tùy Chọn Cấu Hình CSDL
                                                            </button>
                                                        </h2>
                                                        <div id="collapseConfig_@(i)_@(j)" class="accordion-collapse collapse" aria-labelledby="headingConfig_@(i)_@(j)" data-bs-parent="#@accordionParentId">
                                                            <div class="accordion-body">
                                                                <div class="row config-prop-group g-2">
                                                                    <div class="col-md-4 prop-col">
                                                                        <label for="@(baseId)ColumnTypeName" class="form-label">Kiểu CSDL (ColumnType)</label>
                                                                        <input type="text" id="@(baseId)ColumnTypeName" name="Tables[@i].Properties[@j].ColumnTypeName" class="form-control form-control-sm" value="@prop.ColumnTypeName" placeholder="ví dụ: decimal(18,2)" />
                                                                    </div>
                                                                    <div class="col-md-4 prop-col d-flex align-items-end">
                                                                        <div class="form-check form-switch mb-2 byte-array-option" style="@(prop.DataType == "byte[]" ? "" : "display:none;")">
                                                                            <input id="@(baseId)IsTimestamp" name="Tables[@i].Properties[@j].IsTimestamp" class="form-check-input" type="checkbox" @(prop.IsTimestamp ? "checked" : "") value="true" />
                                                                            <input type="hidden" name="Tables[@i].Properties[@j].IsTimestamp" value="false" />
                                                                            <label for="@(baseId)IsTimestamp" class="form-check-label">RowVersion?</label>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-4 prop-col d-flex align-items-end">
                                                                        <div class="form-check form-switch mb-2">
                                                                            <input id="@(baseId)IsConcurrencyToken" name="Tables[@i].Properties[@j].IsConcurrencyToken" class="form-check-input" type="checkbox" @(prop.IsConcurrencyToken ? "checked" : "") value="true" />
                                                                            <input type="hidden" name="Tables[@i].Properties[@j].IsConcurrencyToken" value="false" />
                                                                            <label for="@(baseId)IsConcurrencyToken" class="form-check-label">Concurrency Token?</label>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <button type="button" class="btn btn-sm btn-outline-primary add-property-btn mt-3" data-table-index="@i"><i class="fas fa-plus me-1"></i>Thêm Thuộc Tính</button>
                            </div>
                        </div>
                    }
                </div>
                <button type="button" id="addTableBtn" class="btn btn-info mt-3 mb-3"><i class="fas fa-plus-circle me-1"></i>Thêm Bảng Mới</button>
                <div class="mt-4">
                    <button type="submit" id="generateBtn" class="btn btn-success btn-lg">
                        <i class="fas fa-cogs me-2"></i>Tạo Mã
                    </button>
                </div>
                <div class="mb-3">
                    <label for="sqlInput" class="form-label fw-bold">Nhập code SQL (DDL):</label>
                    <textarea id="sqlInput" class="form-control" rows="12" placeholder="Dán code SQL tạo bảng ở đây..."></textarea>
                    <button type="button" id="parseSqlBtn" class="btn btn-outline-primary mt-2">
                        <i class="fas fa-magic me-1"></i>Phân tích & Generate
                    </button>
                </div>
            </form>
            <div id="jobStatus" style="display:none;">
                <h4>Trạng thái tạo mã:</h4>
                <p id="statusMessage">Đang chờ...</p>
                <div class="progress" style="display:none;">
                    <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <a id="downloadLink" href="#" class="btn btn-primary mt-2" style="display:none;">Tải File ZIP</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
    <script>
        const dataTypeOptionsHtml = `@Html.Raw(dataTypeOptionsHtml)`;
        const deleteBehaviorOptionsHtml = `@Html.Raw(deleteBehaviorOptionsHtml)`;

        function getDefinedTableNames(currentTableIndex) {
            let names = [];
            $('#tablesContainer .table-def').each(function (idx) {
                let tableName = $(this).find('.table-name-input').val();
                if (tableName) { names.push(tableName); }
            });
            return names;
        }

        function getPrimaryKeyDataType(tableName) {
            let pkDataType = 'int'; 
            const $targetTable = $(`#tablesContainer .table-def .table-name-input[value="${tableName}"]`).closest('.table-def');
            if ($targetTable.length) {
                const $pkProperty = $targetTable.find('.properties-container .property-def input[name$=".IsPrimaryKey"][type="checkbox"]:checked').first().closest('.property-def');
                if ($pkProperty.length) {
                    pkDataType = $pkProperty.find('select[name$=".DataType"]').val();
                }
            }
            const validSystemDataTypes = ["string", "int", "long", "bool", "DateTime", "decimal", "Guid", "double", "float", "byte[]"];
            return validSystemDataTypes.includes(pkDataType) ? pkDataType : 'int';
        }

        function populateReferencedTableDropdown(dropdownElement, currentTableIndex) {
            if ($(dropdownElement).data('select2')) { $(dropdownElement).select2('destroy');  }
            let definedTables = getDefinedTableNames(currentTableIndex);
            let currentValue = $(dropdownElement).val();
            $(dropdownElement).html('<option value="">-- Chọn Bảng --</option>');
            definedTables.forEach(name => { $(dropdownElement).append($('<option>', { value: name, text: name })); });
            if (currentValue && definedTables.includes(currentValue)) { $(dropdownElement).val(currentValue); }
            $(dropdownElement).select2({ theme: "bootstrap-5", dropdownParent: $(dropdownElement).closest('.fk-options') });
        }

        function updateAllReferencedTableDropdowns() {
            $('#tablesContainer .table-def').each(function (tableIdx) {
                $(this).find('.referenced-table-dropdown').each(function () { populateReferencedTableDropdown(this, tableIdx); });
            });
        }

        function toggleValidationAndConfigFields(propertyElement, selectedDataType) {
            const stringFields = $(propertyElement).find('.string-validation');
            const numericFields = $(propertyElement).find('.numeric-validation');
            const byteArrayOptions = $(propertyElement).find('.byte-array-option');
            stringFields.toggle(selectedDataType === 'string');
            numericFields.toggle(['int', 'long', 'decimal', 'double', 'float'].includes(selectedDataType));
            byteArrayOptions.toggle(selectedDataType === 'byte[]');
        }

      // Hàm này ở khoảng dòng 556-642 trong file của bạn
// (Không đổi tên hàm này, đây là hàm re-index chính)
        function updatePropertyControls(tableIndex, propertyIndex, propertyElement) { // propertyElement là DOM element
            const $propertyElementJQ = $(propertyElement); // Tạo đối tượng jQuery một lần

            $propertyElementJQ.attr('data-property-index', propertyIndex);
            const baseName = `Tables[${tableIndex}].Properties[${propertyIndex}]`;
            const baseId = `Tables_${tableIndex}__Properties_${propertyIndex}__`;

            // Cập nhật thuộc tính 'name' cho tất cả input, select, textarea có name chứa "Properties["
            $propertyElementJQ.find('[name*="Properties["]').each(function() {
                const oldName = $(this).attr('name');
                if (oldName) { // Chỉ xử lý nếu có thuộc tính name
                    const nameSuffix = oldName.substring(oldName.lastIndexOf("].") + 2);
                    $(this).attr('name', `${baseName}.${nameSuffix}`);
                }
            });

            // Cập nhật thuộc tính 'id' và 'label for'
            $propertyElementJQ.find('[id*="__Properties_"]').each(function() {
                const oldId = $(this).attr('id');
                if (oldId) {
                    const idSuffixMatch = oldId.match(/__Properties_\d+__(.*)/);
                    if (idSuffixMatch && idSuffixMatch[1]) {
                        const newId = `${baseId}${idSuffixMatch[1]}`;
                        $(this).attr('id', newId);
                        // Cập nhật label tương ứng nếu có
                        $propertyElementJQ.find(`label[for="${oldId}"]`).attr('for', newId);
                    }
                }
            });
            
            // Cập nhật data-valmsg-for cho các span validation
            $propertyElementJQ.find('span[data-valmsg-for*="Properties["]').each(function() {
                const oldValMsgFor = $(this).attr('data-valmsg-for');
                if (oldValMsgFor) {
                    const valMsgSuffix = oldValMsgFor.substring(oldValMsgFor.lastIndexOf("].") + 2);
                    $(this).attr('data-valmsg-for', `${baseName}.${valMsgSuffix}`);
                }
            });

            // Cập nhật data-table-index và data-property-index cho các nút và checkbox cụ thể
            $propertyElementJQ.find('.remove-property-btn, .fk-checkbox')
                            .attr('data-property-index', propertyIndex)
                            .attr('data-table-index', tableIndex);
            
            // Cập nhật IDs và targets cho card header và collapse của property
            const mainCollapseId = `collapseProperty_${tableIndex}_${propertyIndex}`;
            const mainHeadingId = `headingProperty_${tableIndex}_${propertyIndex}`;
            $propertyElementJQ.find('.card-header').first().attr({ // Chỉ card-header của property-def
                'id': mainHeadingId,
                'data-bs-target': `#${mainCollapseId}`,
                'aria-controls': mainCollapseId
            });
            $propertyElementJQ.find('.card-body.accordion-collapse').first().attr({ // Chỉ card-body của property-def
                'id': mainCollapseId,
                'aria-labelledby': mainHeadingId,
                'data-bs-parent': `#tablesContainer_${tableIndex}_PropertiesContainer`
            });

            // Cập nhật IDs cho accordion bên trong (FK, Validation, Config)
            const accordionParentId = `accordionProperty_${tableIndex}_${propertyIndex}`;
            $propertyElementJQ.find('.accordion').first().attr('id', accordionParentId); // Accordion chính bên trong property
            $propertyElementJQ.find('.accordion-item').each(function(idx, item) {
                let itemType = '';
                const buttonText = $(item).find('button.accordion-button').text().trim();
                if (buttonText.includes('Khóa Ngoại')) itemType = 'Fk';
                else if (buttonText.includes('Xác Thực')) itemType = 'Validation';
                else if (buttonText.includes('Cấu Hình')) itemType = 'Config';
                else itemType = `Item${idx}`;

                const collapseId = `collapse${itemType}_${tableIndex}_${propertyIndex}`;
                const headingId = `heading${itemType}_${tableIndex}_${propertyIndex}`;

                $(item).find('.accordion-header').attr('id', headingId);
                $(item).find('button.accordion-button').attr({'data-bs-target': `#${collapseId}`, 'aria-controls': collapseId });
                $(item).find('.accordion-collapse').attr({'id': collapseId, 'aria-labelledby': headingId, 'data-bs-parent': `#${accordionParentId}` });
            });

            // Kích hoạt/Vô hiệu hóa nút xóa thuộc tính
            $propertyElementJQ.find('.remove-property-btn').prop('disabled', $propertyElementJQ.siblings('.property-def').length === 0 && $propertyElementJQ.parent().find('.property-def').length <=1);

            // Khởi tạo Select2 cho DataType và DeleteBehavior trong propertyElement này
            const $dataTypeSelector = $propertyElementJQ.find('select[name$=".DataType"]');
            if ($dataTypeSelector.data('select2')) { $dataTypeSelector.select2('destroy'); }
            $dataTypeSelector.select2({ theme: "bootstrap-5", dropdownParent: $dataTypeSelector.closest('.prop-col') });

            const $deleteBehaviorSelector = $propertyElementJQ.find('select[name$=".DeleteBehavior"]');
            if ($deleteBehaviorSelector.data('select2')) { $deleteBehaviorSelector.select2('destroy'); }
            $deleteBehaviorSelector.select2({ theme: "bootstrap-5", dropdownParent: $deleteBehaviorSelector.closest('.col-md-6') });
            
            // Populate dropdown bảng tham chiếu cho thuộc tính này
            const $refTableDropdown = $propertyElementJQ.find('select[name$=".ReferencedTableName"]');
            populateReferencedTableDropdown($refTableDropdown, tableIndex);

            // Lấy giá trị DataType hiện tại và cập nhật các trường validation/config
            const selectedDataType = $dataTypeSelector.val();
            toggleValidationAndConfigFields(propertyElement, selectedDataType); // toggleValidationAndConfigFields nhận DOM element

            // Gọi hàm xử lý logic UI mới sau khi đã re-index và khởi tạo xong
            refreshPropertyCardUI($propertyElementJQ); // Truyền đối tượng jQuery
        }
        function reindexPropertiesForTable(tableIndex) {
             $(`.properties-container[data-table-index='${tableIndex}']`).attr('id', `tablesContainer_${tableIndex}_PropertiesContainer`);
            $(`.properties-container[data-table-index='${tableIndex}'] .property-def`).each(function (propIdx) {
                updatePropertyControls(tableIndex, propIdx, this);
            });
        }

        function reindexTables() {
            $('#tablesContainer .table-def').each(function(tableIdx) {
                const $table = $(this);
                // Update data attribute for index
                $table.attr('data-table-index', tableIdx);

                // Update name/id attributes for table name input (đảm bảo là TableName)
                $table.find('.table-name-input').attr('name', `Tables[${tableIdx}].TableName`);
                $table.find('.table-name-input').attr('id', `table-name-${tableIdx}`);

                // Reindex properties within this table
                reindexProperties($table.find('.properties-container'));

                // Update accordion header/collapse IDs and data-bs-target
                $table.find('.accordion-header button').attr('data-bs-target', `#collapse-${tableIdx}`);
                $table.find('.accordion-collapse').attr('id', `collapse-${tableIdx}`);
            });
        }

        $('#tablesContainer').on('input', '.table-name-input', function () {
            let tableDef = $(this).closest('.table-def');
            tableDef.find('.table-name-display').text($(this).val() || `Bảng ${tableDef.data('table-index') + 1}`);
            updateAllReferencedTableDropdowns();
        });

        $('#tablesContainer').on('change', 'input[name$=".EnableSoftDelete"][type="checkbox"]', function() {
            const isChecked = $(this).is(':checked');
            $(this).siblings('input[type="hidden"][name$=".EnableSoftDelete"]').prop('disabled', isChecked);
        });

        $('#tableSearchInput').on('keyup', function () { /* ... unverändert ... */ });
        $('#tablesContainer').on('keyup', '.property-search-input', function () { /* ... unverändert ... */ });

        $('#addTableBtn').click(function () {
            let currentTableIndex = $('#tablesContainer .table-def').length;
            const tableTemplateEl = document.getElementById('tableTemplate');
            if (!tableTemplateEl || typeof tableTemplateEl.content === 'undefined') { console.error("tableTemplate missing"); return; }
            const tableFragment = tableTemplateEl.content.cloneNode(true);
            const firstElement = tableFragment.firstElementChild;
            if (!firstElement) { console.error("tableTemplate empty"); return; }
            let tableHtmlString = firstElement.outerHTML;
            tableHtmlString = tableHtmlString.replace(/__TABLE_INDEX__/g, currentTableIndex).replace(/__TABLE_NUMBER__/g, currentTableIndex + 1);
            $('#tablesContainer').append(tableHtmlString);
            $(`.properties-container[data-table-index='${currentTableIndex}']`).attr('id', `tablesContainer_${currentTableIndex}_PropertiesContainer`);
            addPropertyToTable(currentTableIndex, { PropertyName: "Id", DataType: "int", IsPrimaryKey: true, IsNullable: false });
            addPropertyToTable(currentTableIndex, { PropertyName: "Name", DataType: "string", IsNullable: false, MaxLength: 255 });
            reindexTables();
        });

        function addPropertyToTable(tableIndex, propertyData = {}) {
            let propertyContainer = $(`.properties-container[data-table-index='${tableIndex}']`);
            let propertyCounter = propertyContainer.find('.property-def').length;
            const propertyTemplateEl = document.getElementById('propertyTemplate');
            if (!propertyTemplateEl || typeof propertyTemplateEl.content === 'undefined') { console.error("propertyTemplate missing"); return; }
            const propertyFragment = propertyTemplateEl.content.cloneNode(true);
            const firstPropertyElement = propertyFragment.firstElementChild;
            if (!firstPropertyElement) { console.error("propertyTemplate empty"); return; }
            let newPropertyHtmlString = firstPropertyElement.outerHTML;
            newPropertyHtmlString = newPropertyHtmlString.replace(/__TABLE_INDEX__/g, tableIndex).replace(/__PROP_INDEX__/g, propertyCounter);
            let $newPropElement = $(newPropertyHtmlString);

            $newPropElement.find('.data-type-selector').html(dataTypeOptionsHtml).val(propertyData.DataType || 'string');
            $newPropElement.find('.delete-behavior-selector').html(deleteBehaviorOptionsHtml).val(propertyData.DeleteBehavior || '');

            $newPropElement.find('input[name$=".PropertyName"]').val(propertyData.PropertyName || '');
            $newPropElement.find('input[name$=".IsPrimaryKey"]').first().prop('checked', propertyData.IsPrimaryKey || false);
            $newPropElement.find('input[name$=".IsNullable"]').first().prop('checked', propertyData.IsNullable === undefined ? true : propertyData.IsNullable);
            $newPropElement.find('input[name$=".MaxLength"]').val(propertyData.MaxLength || '');
            $newPropElement.find('input[name$=".MinLength"]').val(propertyData.MinLength || '');
            $newPropElement.find('input[name$=".RangeMin"]').val(propertyData.RangeMin || '');
            $newPropElement.find('input[name$=".RangeMax"]').val(propertyData.RangeMax || '');
            $newPropElement.find('input[name$=".IsEmailAddress"]').first().prop('checked', propertyData.IsEmailAddress || false);
            $newPropElement.find('input[name$=".IsPhoneNumber"]').first().prop('checked', propertyData.IsPhoneNumber || false);
            $newPropElement.find('input[name$=".IsUrl"]').first().prop('checked', propertyData.IsUrl || false);
            $newPropElement.find('input[name$=".RegexPattern"]').val(propertyData.RegexPattern || '');
            $newPropElement.find('input[name$=".ColumnTypeName"]').val(propertyData.ColumnTypeName || '');
            $newPropElement.find('input[name$=".IsTimestamp"]').first().prop('checked', propertyData.IsTimestamp || false);
            $newPropElement.find('input[name$=".IsConcurrencyToken"]').first().prop('checked', propertyData.IsConcurrencyToken || false);
            $newPropElement.find('input[name$=".IsForeignKey"]').first().prop('checked', propertyData.IsForeignKey || false);
            $newPropElement.find('input[name$=".NavigationPropertyName"]').val(propertyData.NavigationPropertyName || '');
            $newPropElement.find('input[name$=".CustomFKConstraintName"]').val(propertyData.CustomFKConstraintName || '');
            
            $newPropElement.appendTo(propertyContainer);
            updatePropertyControls(tableIndex, propertyCounter, $newPropElement[0]);
            $newPropElement.find('.data-type-selector').trigger('change');
            $newPropElement.find('.fk-checkbox').trigger('change');
            reindexPropertiesForTable(tableIndex);
        }

        $('#tablesContainer').on('click', '.remove-table-btn', function () {
            if ($('#tablesContainer .table-def').length <= 1) {
                alert('Không thể xóa bảng cuối cùng.');
                return;
            }
            if (confirm('Bạn có chắc chắn muốn xóa bảng này?')) {
                $(this).closest('.table-def').remove();
                reindexTables();
            }
        });

        $('#tablesContainer').on('click', '.remove-property-btn', function () {
            const $propertyContainer = $(this).closest('.properties-container');
            if ($propertyContainer.find('.property-def').length <= 1) {
                alert('Không thể xóa thuộc tính cuối cùng của bảng.');
                return;
            }
            if (confirm('Bạn có chắc chắn muốn xóa thuộc tính này?')) {
                const tableIndex = $(this).data('table-index');
                $(this).closest('.property-def').remove();
                reindexPropertiesForTable(tableIndex);
            }
        });
        
        $('#tablesContainer').on('change', '.fk-checkbox', function () {
            let tableIndex = $(this).data('table-index');
            let propertyIndex = $(this).data('property-index');
            let fkOptionsDiv = $(`#fkOptions_${tableIndex}_${propertyIndex}`);
            let allFkInputs = fkOptionsDiv.find('input, select');

            if ($(this).is(':checked')) {
                fkOptionsDiv.slideDown();
                allFkInputs.prop('disabled', false); // Enable inputs when FK is checked
                populateReferencedTableDropdown(fkOptionsDiv.find('.referenced-table-dropdown'), tableIndex);
                // Logic to auto-suggest based on referenced table (if one is selected)
                fkOptionsDiv.find('.referenced-table-dropdown').trigger('change'); 
            } else {
                fkOptionsDiv.slideUp();
                allFkInputs.prop('disabled', true); // Disable inputs when FK is unchecked
                // Clear values if needed
                fkOptionsDiv.find('.referenced-table-dropdown').val('').trigger('change.select2');
                fkOptionsDiv.find('.nav-prop-name-input').val('');
                fkOptionsDiv.find('.delete-behavior-selector').val('').trigger('change.select2');
                fkOptionsDiv.find('input[name$=".CustomFKConstraintName"]').val('');
            }
        });

        $('#tablesContainer').on('change', '.referenced-table-dropdown', function () {
             let fkOptionsDiv = $(this).closest('.fk-options');
            let navPropInput = fkOptionsDiv.find('.nav-prop-name-input');
            let currentPropertyCard = $(this).closest('.property-def');
            let currentDataTypeSelector = currentPropertyCard.find('select[name$=".DataType"]');
            let propertyNameInput = currentPropertyCard.find('input[name$=".PropertyName"]');
            let selectedReferencedTable = $(this).val();

            if (selectedReferencedTable) {
                let pkDataType = getPrimaryKeyDataType(selectedReferencedTable);
                currentDataTypeSelector.val(pkDataType).trigger('change');
            }

            if ((!propertyNameInput.val() || propertyNameInput.val().startsWith("NewProperty")) && selectedReferencedTable) {
                let suggestedFkName = selectedReferencedTable.replace(/[^a-zA-Z0-9_]/g, '') + "Id";
                propertyNameInput.val(suggestedFkName);
            }
            if (!navPropInput.val() && selectedReferencedTable) {
                 navPropInput.val(selectedReferencedTable.replace(/[^a-zA-Z0-9_]/g, ''));
            }
        });

        $('#tablesContainer').on('change', '.data-type-selector', function () {
            let propertyElement = $(this).closest('.property-def');
            toggleValidationAndConfigFields(propertyElement, $(this).val());
        });


        $('#generateSchemaForm').submit(function (event) {
            // Before submitting, ensure all disabled FK option inputs are re-enabled if their parent FK checkbox is checked
            // This is because disabled inputs are not submitted. We only disable them for UI/UX.
            // However, the validation error suggests the server IS receiving them as empty and considering them required.
            // So, the primary fix is server-side (nullable viewmodel properties).
            // This client-side disabling/enabling is more for UI clarity and potentially avoiding sending empty strings
            // if the server treats null differently from empty string for optional fields.

            // Forcibly enable all inputs before serialization for AJAX, then disable again if needed (though AJAX success/error handles button state)
            // $(this).find('input:disabled, select:disabled').prop('disabled', false); // Temporary enable for submission

            $('.text-danger.client-validation').remove();
            let isValid = true;
            let tableNames = new Set();
            $('#tablesContainer .table-name-input').each(function () {
                let tableName = $(this).val();
                if (tableName) {
                    if (tableNames.has(tableName)) {
                        $(this).after(`<span class="text-danger client-validation">Tên bảng '${tableName}' bị trùng.</span>`);
                        isValid = false;
                    }
                    tableNames.add(tableName);
                } else if (!$(this).prop('disabled')) { 
                     $(this).after(`<span class="text-danger client-validation">Tên bảng không được trống.</span>`);
                     isValid = false;
                }
            });

            $('#tablesContainer .properties-container').each(function () {
                let propertyNames = new Set();
                $(this).find('input[name$=".PropertyName"]').each(function () {
                    let propName = $(this).val();
                    if (propName) {
                        if (propertyNames.has(propName)) {
                            $(this).after(`<span class="text-danger client-validation">Tên thuộc tính '${propName}' bị trùng trong bảng này.</span>`);
                            isValid = false;
                        }
                        propertyNames.add(propName);
                    } else if (!$(this).prop('disabled')) {
                        $(this).after(`<span class="text-danger client-validation">Tên thuộc tính không được trống.</span>`);
                        isValid = false;
                    }
                });
            });

            $('#tablesContainer .property-def').each(function() {
                const $propertyCard = $(this);
                const isFkChecked = $propertyCard.find('input[name$=".IsForeignKey"][type="checkbox"]').is(':checked');
                if (isFkChecked) {
                    const $refTableSelect = $propertyCard.find('select[name$=".ReferencedTableName"]');
                    if (!$refTableSelect.val()) {
                        // Remove previous error for this specific select to avoid duplicates
                        $refTableSelect.siblings('.client-validation').remove();
                        $refTableSelect.after(`<span class="text-danger client-validation d-block">Bảng tham chiếu là bắt buộc khi là Khóa Ngoại.</span>`);
                        isValid = false;
                    }
                    // You could add similar checks for NavigationPropertyName if it's also mandatory when IsForeignKey is true
                }
            });

            if (!isValid) {
                event.preventDefault();
                if ($('.alert.alert-danger[asp-validation-summary="All"]').is(':hidden')) {
                    $('.alert.alert-danger[asp-validation-summary="All"]').html("Vui lòng sửa các lỗi được chỉ ra.").show();
                }
                return;
            }

            event.preventDefault();
            $('#generateBtn').prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang gửi...');
            $('#jobStatus').show().find('#statusMessage').text('Đang gửi yêu cầu...').removeClass('status-completed status-failed status-processing');
            $('#progressBar').parent().show();
            $('#progressBar').css('width', '10%').text('10%');
            $('#downloadLink').hide();
            
            // Temporarily enable disabled fields for submission if they are part of a checked FK
            $('#tablesContainer .fk-checkbox:checked').each(function() {
                $(this).closest('.accordion-body').find('.fk-options input, .fk-options select').prop('disabled', false);
            });


            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    if (response.success && response.jobId) {
                        $('#statusMessage').text(`Đã gửi yêu cầu. Job ID: ${response.jobId}. Đang chờ xử lý...`).addClass('status-processing');
                        $('#progressBar').css('width', '25%').text('25%');
                        pollJobStatus(response.jobId);
                    } else {
                        $('#statusMessage').text(`Lỗi: ${response.message || 'Không thể bắt đầu tạo mã.'}`).addClass('status-failed');
                        $('#generateBtn').prop('disabled', false).html('<i class="fas fa-cogs me-2"></i>Tạo Mã');
                        $('#progressBar').parent().hide();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    let errorMsg = 'Lỗi kết nối khi gửi yêu cầu.';
                    if (jqXHR.responseJSON && jqXHR.responseJSON.message) {
                        errorMsg = jqXHR.responseJSON.message;
                    } else if (textStatus && errorThrown) {
                        errorMsg = `Lỗi: ${textStatus} - ${errorThrown}`;
                    }
                    $('#statusMessage').text(errorMsg).addClass('status-failed');
                    $('#generateBtn').prop('disabled', false).html('<i class="fas fa-cogs me-2"></i>Tạo Mã');
                    $('#progressBar').parent().hide();
                },
                complete: function() {
                    // Re-disable FK fields if their checkbox is not checked after submission attempt
                     $('#tablesContainer .fk-checkbox:not(:checked)').each(function() {
                        $(this).closest('.accordion-body').find('.fk-options input, .fk-options select').prop('disabled', true);
                    });
                }
            });
        });

        function pollJobStatus(jobId) {
            let intervalId = setInterval(function () {
                $.ajax({
                    url: '@Url.Action("GetJobStatus", "Generator")' + '?jobId=' + jobId,
                    type: 'GET',
                    success: function (response) {
                        if (response) {
                            $('#statusMessage').text(response.message || 'Đang xử lý...');
                            
                            // Update status classes based on the status
                            if (response.status === 'Completed') {
                                clearInterval(intervalId);
                                $('#statusMessage').text(response.message || 'Hoàn thành!').addClass('status-completed').removeClass('status-processing status-failed');
                                $('#progressBar').css('width', '100%').text('100%');
                                $('#generateBtn').prop('disabled', false).html('<i class="fas fa-cogs me-2"></i>Tạo Mã');
                                if (response.downloadFileName) {
                                    $('#downloadLink').attr('href', '@Url.Action("DownloadGeneratedCode", "Generator")?fileName=' + response.downloadFileName).show();
                                }
                            } else if (response.status === 'Error') {
                                clearInterval(intervalId);
                                $('#statusMessage').text(response.message || 'Xử lý thất bại.').addClass('status-failed').removeClass('status-processing status-completed');
                                $('#generateBtn').prop('disabled', false).html('<i class="fas fa-cogs me-2"></i>Tạo Mã');
                                $('#progressBar').parent().hide();
                            } else if (response.status === 'Processing') {
                                // Keep progress at 25% while processing
                                $('#progressBar').css('width', '25%').text('25%');
                                $('#statusMessage').addClass('status-processing').removeClass('status-completed status-failed');
                            } else if (response.status === 'Queued') {
                                // Keep progress at 10% while queued
                                $('#progressBar').css('width', '10%').text('10%');
                                $('#statusMessage').addClass('status-processing').removeClass('status-completed status-failed');
                            }
                        } else {
                            $('#statusMessage').text('Nhận được phản hồi không hợp lệ từ server khi kiểm tra trạng thái. Job có thể đã hết hạn hoặc có lỗi.').addClass('status-failed');
                            clearInterval(intervalId);
                            $('#generateBtn').prop('disabled', false).html('<i class="fas fa-cogs me-2"></i>Tạo Mã');
                            $('#progressBar').parent().hide();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        clearInterval(intervalId);
                        $('#statusMessage').text(`Lỗi khi kiểm tra trạng thái job: ${textStatus} - ${errorThrown}. Vui lòng thử lại.`).addClass('status-failed');
                        $('#generateBtn').prop('disabled', false).html('<i class="fas fa-cogs me-2"></i>Tạo Mã');
                        $('#progressBar').parent().hide();
                    }
                });
            }, 2000); // Poll every 2 seconds
        }
        function initializeSortableForTable(tableIndex) { /* ... unverändert ... */ }
        function initializeSortableForAllTables() { /* ... unverändert ... */ }
        $('#viewDiagramBtn').click(function() {
            const diagramContainer = $('#diagramContainer');
            if (diagramContainer.is(':visible')) {
                diagramContainer.slideUp();
                return;
            }

            // Generate Mermaid diagram syntax
            let diagramSyntax = 'erDiagram\n';

            // Add tables
            $('#tablesContainer .table-def').each(function() {
                const tableName = $(this).find('.table-name-input').val();
                if (!tableName) return;

                diagramSyntax += `    ${tableName} {\n`;

                // Add properties
                $(this).find('.property-def').each(function() {
                    const propName = $(this).find('input[name$=".PropertyName"]').val();
                    const dataType = $(this).find('select[name$=".DataType"]').val();
                    const isPrimaryKey = $(this).find('input[name$=".IsPrimaryKey"]').is(':checked');
                    const isNullable = $(this).find('input[name$=".IsNullable"]').is(':checked');
                    const isForeignKey = $(this).find('input[name$=".IsForeignKey"]').is(':checked');

                    if (!propName) return;

                    // Build property line (Mermaid chỉ cho 1 attribute)
                    let propSyntax = `        ${dataType} ${propName}`;
                    if (isPrimaryKey) {
                        propSyntax += ' PK';
                    } else if (isForeignKey) {
                        propSyntax += ' FK';
                    } else if (!isNullable) {
                        propSyntax += ' not null';
                    }
                    diagramSyntax += propSyntax + '\n';
                });

                diagramSyntax += '    }\n';
            });

            // Add relationships
            $('#tablesContainer .property-def').each(function() {
                const isForeignKey = $(this).find('input[name$=".IsForeignKey"]').is(':checked');
                if (!isForeignKey) return;

                const currentTable = $(this).closest('.table-def').find('.table-name-input').val();
                const referencedTable = $(this).find('select[name$=".ReferencedTableName"]').val();
                const propName = $(this).find('input[name$=".PropertyName"]').val();

                if (!currentTable || !referencedTable || !propName) return;

                // You can adjust the relationship type here if needed
                let relSyntax = `    ${currentTable} }o--|| ${referencedTable} : "${propName}"`;
                diagramSyntax += relSyntax + '\n';
            });

            // Debug: log the syntax
            console.log('Mermaid syntax:', diagramSyntax);

            // Update diagram
            diagramContainer.html(diagramSyntax);
            diagramContainer.slideDown();

            // Render diagram
            mermaid.initialize({ 
                startOnLoad: false,
                securityLevel: 'loose',
                theme: 'default',
                flowchart: {
                    useMaxWidth: false,
                    htmlLabels: true
                }
            });

            try {
                mermaid.render('diagram', diagramSyntax).then(function(result) {
                    diagramContainer.html(result.svg);
                }).catch(function(error) {
                    console.error('Error rendering diagram:', error);
                    diagramContainer.html('<div class="alert alert-danger">Lỗi khi tạo sơ đồ. Vui lòng kiểm tra console để biết thêm chi tiết.</div>');
                });
            } catch (error) {
                console.error('Error initializing diagram:', error);
                diagramContainer.html('<div class="alert alert-danger">Lỗi khi khởi tạo sơ đồ. Vui lòng kiểm tra console để biết thêm chi tiết.</div>');
            }
        });

        $(document).ready(function() {
             mermaid.initialize({ startOnLoad: false, securityLevel: 'loose', theme: 'default' });
            if (@Model.Tables.Count == 0 || (@Model.Tables.Count == 1 && @Model.Tables[0].Properties.Count == 0 )) {
                 $('#addTableBtn').click();
            } else {
                reindexTables();
            }
            $.fn.select2.amd.define('select2/i18n/vi', [], function () { /* ... unverändert ... */ });
            $('select').select2({ language: "vi" }); 

            // Add event handler for add property button
            $('#tablesContainer').on('click', '.add-property-btn', function() {
                const tableIndex = $(this).data('table-index');
                const propertyContainer = $(`.properties-container[data-table-index='${tableIndex}']`);
                const propertyCounter = propertyContainer.find('.property-def').length;

                const propertyTemplateEl = document.getElementById('propertyTemplate');
                if (!propertyTemplateEl || typeof propertyTemplateEl.content === 'undefined') { 
                    console.error("propertyTemplate missing"); 
                    return; 
                }

                const propertyFragment = propertyTemplateEl.content.cloneNode(true);
                const firstPropertyElement = propertyFragment.firstElementChild;
                if (!firstPropertyElement) { 
                    console.error("propertyTemplate empty"); 
                    return; 
                }

                let newPropertyHtmlString = firstPropertyElement.outerHTML;
                newPropertyHtmlString = newPropertyHtmlString
                    .replace(/__TABLE_INDEX__/g, tableIndex)
                    .replace(/__PROP_INDEX__/g, propertyCounter);

                let $newPropElement = $(newPropertyHtmlString);
                $newPropElement.find('.data-type-selector').html(dataTypeOptionsHtml).val('string');
                $newPropElement.find('.delete-behavior-selector').html(deleteBehaviorOptionsHtml).val('');
                $newPropElement.find('input[name$=".PropertyName"]').val(`NewProperty${propertyCounter + 1}`);

                $newPropElement.appendTo(propertyContainer);
                updatePropertyControls(tableIndex, propertyCounter, $newPropElement[0]);
                $newPropElement.find('.data-type-selector').trigger('change');
                $newPropElement.find('.fk-checkbox').trigger('change');
                reindexPropertiesForTable(tableIndex);
            });
        });

        $('#parseSqlBtn').click(function() {
            const sql = $('#sqlInput').val();
            if (!sql.trim()) {
                alert('Vui lòng nhập code SQL!');
                return;
            }
            const tables = generateFromSQL(sql);
            if (tables.length === 0) {
                alert('Không tìm thấy bảng nào trong SQL!');
                return;
            }
            fillTablesToUI(tables);
            console.log('Kết quả generate từ SQL:', tables);
            alert('Đã generate bảng và thuộc tính vào UI! Bạn có thể chỉnh sửa lại rồi bấm \"Tạo Mã\" để tải code.');
            // Đặt scroll ở đây!
            $('html, body').animate({
                scrollTop: $('#tablesContainer').offset().top - 50
            }, 500);
        });

   function fillTablesToUI(parsedTables) {
    $('#tablesContainer').hide().empty();

    if (!parsedTables || parsedTables.length === 0) return;

    // Build bảng trước, chưa build thuộc tính
    let html = '';
    parsedTables.forEach((tableData, tableIdx) => {
        let tableHtml = $('#tableTemplate').html()
            .replace(/__TABLE_INDEX__/g, tableIdx)
            .replace(/__TABLE_NUMBER__/g, tableIdx + 1);
        html += tableHtml;
    });
    $('#tablesContainer').html(html);

    // Sau đó mới build thuộc tính cho từng bảng
    parsedTables.forEach((tableData, tableIdx) => {
        const $table = $('#tablesContainer .table-def').eq(tableIdx);
        const $propertiesContainer = $table.find('.properties-container');
        $propertiesContainer.empty();
        if (tableData.properties && tableData.properties.length > 0) {
            tableData.properties.forEach((propData, propIdx) => {
                let propertyHtml = $('#propertyTemplate').html()
                    .replace(/__TABLE_INDEX__/g, tableIdx)
                    .replace(/__PROP_INDEX__/g, propIdx);
                let $prop = $(propertyHtml);
                $prop.find('input[name$=".PropertyName"]').val(propData.name);
                $prop.find('select[name$=".DataType"]').html(dataTypeOptionsHtml).val(propData.csharpType);
                $prop.find('input[name$=".IsPrimaryKey"]').first().prop('checked', propData.isPrimaryKey);
                $prop.find('input[name$=".IsNullable"]').first().prop('checked', propData.isNullable);
                $prop.find('input[name$=".IsForeignKey"]').first().prop('checked', propData.isForeignKey);
                $prop.find('select[name$=".DeleteBehavior"]').html(deleteBehaviorOptionsHtml);
                $prop.appendTo($propertiesContainer);
            });
        }
    });

    // Sau khi render xong, reindex lại 1 lần
    reindexTables();
    
    // Gán lại giá trị tên bảng sau khi reindex và đảm bảo name đúng
    parsedTables.forEach((tableData, tableIdx) => {
        const $table = $('#tablesContainer .table-def').eq(tableIdx);
        const $tableNameInput = $table.find('.table-name-input');
        $tableNameInput.val(tableData.name).trigger('input');
        $tableNameInput.attr('name', `Tables[${tableIdx}].TableName`);
    });

    $('#tablesContainer').show();
}

        // Hàm ánh xạ kiểu dữ liệu SQL sang C# (có thể mở rộng thêm)
        function mapSqlTypeToCSharp(sqlType) {
            const sType = sqlType.toLowerCase();
            if (sType.includes('char') || sType.includes('text') || sType.startsWith('varchar') || sType.startsWith('nvarchar') || sType.startsWith('longtext')) return 'string';
            if (sType.startsWith('int') || sType.startsWith('smallint') || sType.startsWith('tinyint')) return 'int';
            if (sType.startsWith('bigint')) return 'long';
            if (sType.startsWith('bit') || sType.startsWith('boolean') || sType === 'bool') return 'bool';
            if (sType.startsWith('date') && !sType.includes('time')) return 'DateTime';
            if (sType.startsWith('time') && !sType.includes('stamp')) return 'TimeSpan';
            if (sType.includes('datetime') || sType.includes('timestamp')) return 'DateTime';
            if (sType.startsWith('decimal') || sType.startsWith('numeric') || sType.startsWith('money') || sType.startsWith('smallmoney')) return 'decimal';
            if (sType.startsWith('uniqueidentifier') || sType.startsWith('guid')) return 'Guid';
            if (sType.startsWith('float')) return 'double';
            if (sType.startsWith('real')) return 'float';
            if (sType.includes('binary') || sType.includes('image') || sType.includes('rowversion')) return 'byte[]';
            if (sType.startsWith('enum')) return 'string'; // Enum SQL nên map sang string hoặc tạo enum riêng
            return 'string'; // Mặc định nếu không nhận diện được
        }

function generateFromSQL(sql) {
    const tables = [];
    // Regex để lấy tên bảng và khối định nghĩa của nó
    // Hỗ trợ một số mệnh đề tùy chọn ở cuối như ENGINE, DEFAULT CHARSET cho MySQL
    const tableRegex = /CREATE\s+TABLE\s+([`'"]?[\w\.]+[`'"]?)\s*\(([\s\S]+?)\)(?:\s*ENGINE\s*=\s*\w+\s*)?(?:DEFAULT\s+CHARSET\s*=\s*\w+\s*)?(?:COLLATE\s*=\s*\w+\s*)?;/gi;
    let tableMatch;

    while ((tableMatch = tableRegex.exec(sql)) !== null) {
        let tableName = tableMatch[1].trim().replace(/[`'"]/g, '');
        if (tableName.includes('.')) {
            tableName = tableName.substring(tableName.lastIndexOf('.') + 1);
        }
        const definitionBlock = tableMatch[2];
        const properties = []; // Đổi tên columns thành properties để khớp ViewModel
        const pkColumnsInConstraint = new Set();

        // Bước 1: Xác định các cột trong ràng buộc PRIMARY KEY (nếu có)
        // Ví dụ: PRIMARY KEY (ID1, ID2)
        const primaryKeyConstraintRegex = /PRIMARY\s+KEY\s*\(([^)]+)\)/gi;
        let pkConstraintMatch;
        while((pkConstraintMatch = primaryKeyConstraintRegex.exec(definitionBlock)) !== null) {
            pkConstraintMatch[1].split(',').forEach(pkCol => pkColumnsInConstraint.add(pkCol.trim().replace(/[`'"]/g, '')));
        }

        // Tách khối định nghĩa thành các dòng riêng lẻ cho cột và ràng buộc
        // Cải thiện regex tách dòng, tránh tách sai ở comment hoặc giá trị default
        const lines = definitionBlock.split(/,(?=\s*[`'"]?(?:COLUMN|CONSTRAINT|PRIMARY KEY|FOREIGN KEY|UNIQUE KEY|KEY\s|CHECK\s|\w+)[`'"]?)|,\r?\n/gm);

        lines.forEach(lineContent => {
            let line = lineContent.trim();
            if (!line || line.toUpperCase().startsWith('CONSTRAINT') || line.toUpperCase().startsWith('PRIMARY KEY') || line.toUpperCase().startsWith('FOREIGN KEY') || line.toUpperCase().startsWith('UNIQUE') || line.toUpperCase().startsWith('CHECK')) {
                // Bỏ qua các dòng định nghĩa constraint riêng biệt ở bước này, sẽ xử lý FK sau
                 if (line.toUpperCase().startsWith('PRIMARY KEY') && !line.includes('(')) {
                    // Xử lý trường hợp PRIMARY KEY được định nghĩa inline nhưng không có tên cột (hiếm)
                    // Hoặc nếu đây là định nghĩa PK cho cột cuối cùng mà không có dấu phẩy
                 } else {
                    return;
                 }
            }

            // Regex cho định nghĩa cột (tên, kiểu, các ràng buộc inline)
            // ([`'"]?[\w]+[`'"]?) : Tên cột
            // ([\w\s\(\),\.:]+?) : Kiểu dữ liệu SQL (có thể có khoảng trắng, dấu ngoặc cho precision/scale)
            // ((?:\s+(?:NOT\s+NULL|NULL|PRIMARY\s+KEY|UNIQUE(?: KEY)?|DEFAULT\s?(?:'[^']*'|"[^"]*"|[\w\.-]+|\(\)|CURRENT_TIMESTAMP)|CHECK\s*\([^)]+\)|AUTO_INCREMENT|IDENTITY(?:\(\d+,\s*\d+\))?|COMMENT\s+(?:'[^']*'|"[^"]*"))+)*) : Các ràng buộc còn lại
            const colRegex = /^([`'"]?[\w]+[`'"]?)\s+([a-zA-Z0-9_\(\),\.\[\]]+)(.*)$/i;
            const colMatch = line.match(colRegex);

            if (colMatch) {
                const colName = colMatch[1].replace(/[`'"]/g, '');
                const colSqlType = colMatch[2].trim();
                const colConstraints = (colMatch[3] || "").toUpperCase();

                // Debug
                console.log('colName:', colName, 'colSqlType:', colSqlType, 'map:', mapSqlTypeToCSharp(colSqlType));

                const isPrimaryKey = pkColumnsInConstraint.has(colName) || colConstraints.includes("PRIMARY KEY");
                const isNotNull = colConstraints.includes("NOT NULL") || isPrimaryKey; // PK luôn NOT NULL

                properties.push({
                    name: colName,
                    sqlType: colSqlType,
                    csharpType: mapSqlTypeToCSharp(colSqlType),
                    isPrimaryKey: isPrimaryKey,
                    isNullable: !isNotNull,
                    isForeignKey: false, // Sẽ cập nhật ở bước sau
                    referencedTableName: null,
                    // referencedColumnName: null, // Thường không cần cho việc tạo model EF từ UI này
                });
            }
        });

        // Bước 2: Xác định các ràng buộc FOREIGN KEY
        const fkRegex = /(?:CONSTRAINT\s+[`'"]?[\w]+[`'"]?\s+)?FOREIGN\s+KEY\s*\(([`'"]?[\w]+[`'"]?)\)\s*REFERENCES\s+([`'"]?[\w\.]+[`'"]?)\s*\(([`'"]?[\w]+[`'"]?)\)/gi;
        let fkMatch;
        fkRegex.lastIndex = 0; // Reset lastIndex cho global regex
        while ((fkMatch = fkRegex.exec(definitionBlock)) !== null) {
            const fkColumnName = fkMatch[1].replace(/[`'"]/g, '');
            let refTableName = fkMatch[2].replace(/[`'"]/g, '');
            if (refTableName.includes('.')) { // Xử lý schema.table
                refTableName = refTableName.substring(refTableName.lastIndexOf('.') + 1);
            }
            // const refPkColumnName = fkMatch[3].replace(/[`'"]/g, ''); // Tên cột PK ở bảng tham chiếu

            const propertyToUpdate = properties.find(p => p.name.toLowerCase() === fkColumnName.toLowerCase());
            if (propertyToUpdate) {
                propertyToUpdate.isForeignKey = true;
                propertyToUpdate.referencedTableName = refTableName;
                // propertyToUpdate.referencedColumnName = refPkColumnName; // Có thể lưu nếu cần
            }
        }
        if (properties.length > 0) {
             tables.push({ name: tableName, properties: properties });
        }
    }
    return tables;
}

        $('html, body').animate({
            scrollTop: $('#tablesContainer').offset().top - 50
        }, 500);

        // Delegate event handlers to tablesContainer to handle dynamically added elements
        $('#tablesContainer').on('change', '.property-type-input', function() {
            // Tìm phần tử cha .property-item của input type
            const $prop = $(this).closest('.property-item');
            updatePropertyControls($prop);
        });

        $('#tablesContainer').on('change', '.is-pk-checkbox, .is-fk-checkbox, .is-nullable-checkbox', function() {
             // Tìm phần tử cha .property-item của checkbox
             const $prop = $(this).closest('.property-item');
             updatePropertyControls($prop);
        });

        // Handle Add Property button click using delegation
        $('#tablesContainer').on('click', '.add-property-btn', function() {
            const propertiesContainer = $(this).closest('.accordion-body').find('.properties-container');
            const propertyTemplate = $('#propertyTemplate').html();
            const $prop = $(propertyTemplate);
            propertiesContainer.append($prop);
            // Initialize controls for the newly added property
            updatePropertyControls($prop);
            reindexProperties(propertiesContainer);
            // Scroll to the new property
             $('html, body').animate({
                scrollTop: $prop.offset().top - 100 // Scroll to the new property, adjust offset as needed
            }, 300);

        });

        // Handle Remove Property button click using delegation
        $('#tablesContainer').on('click', '.remove-property-btn', function() {
            const propertiesContainer = $(this).closest('.properties-container');
            $(this).closest('.property-item').remove();
            reindexProperties(propertiesContainer);
        });

        // Handle Remove Table button click using delegation
        $('#tablesContainer').on('click', '.remove-table-btn', function() {
            $(this).closest('.table-def').remove();
            reindexTables();
        });

        // Reindex properties within a single table
        function reindexProperties(propertiesContainer) {
            propertiesContainer.find('.property-item').each(function(propertyIdx) {
                const $prop = $(this);
                // Update data attribute for index
                $prop.data('property-index', propertyIdx);
                // Update name/id attributes for inputs (optional but good practice)
                // Example: <input name="Tables[0].Properties[0].Name" ...>
                const tableIdx = $prop.closest('.table-def').data('table-index');
                $prop.find('[name^="property."]').each(function(){
                     const oldName = $(this).attr('name');
                     const newName = `Tables[${tableIdx}].Properties[${propertyIdx}].${oldName.split('.')[1]}`; // Assuming name format is property.Name, property.Type, etc.
                     $(this).attr('name', newName);
                });

                 $prop.find('[name^="Tables["][name$="].Name"]').attr('name', `Tables[${tableIdx}].Properties[${propertyIdx}].Name`);
                 $prop.find('[name^="Tables["][name$="].Type"]').attr('name', `Tables[${tableIdx}].Properties[${propertyIdx}].Type`);
                 $prop.find('[name^="Tables["][name$="].IsPrimaryKey"]').attr('name', `Tables[${tableIdx}].Properties[${propertyIdx}].IsPrimaryKey`);
                 $prop.find('[name^="Tables["][name$="].IsNullable"]').attr('name', `Tables[${tableIdx}].Properties[${propertyIdx}].IsNullable`);
                 $prop.find('[name^="Tables["][name$="].IsForeignKey"]').attr('name', `Tables[${tableIdx}].Properties[${propertyIdx}].IsForeignKey`);
                 $prop.find('[name^="Tables["][name$="].ReferencesTable"]').attr('name', `Tables[${tableIdx}].Properties[${propertyIdx}].ReferencesTable`);
                 $prop.find('[name^="Tables["][name$="].ReferencesColumn"]').attr('name', `Tables[${tableIdx}].Properties[${propertyIdx}].ReferencesColumn`);
                 $prop.find('[name^="Tables["][name$="].NavigationPropertyName"]').attr('name', `Tables[${tableIdx}].Properties[${propertyIdx}].NavigationPropertyName`);

                 // Update IDs as well if they are used elsewhere (optional)
                 // Example: <input id="property-name-0-0" ...>
                 $prop.find('[id^="property-name-"]').attr('id', `property-name-${tableIdx}-${propertyIdx}`);
                 $prop.find('[id^="property-type-"]').attr('id', `property-type-${tableIdx}-${propertyIdx}`);
                 // ... update other IDs if needed ...
            });
        }

        // Reindex all tables
        function reindexTables() {
            $('#tablesContainer .table-def').each(function(tableIdx) {
                const $table = $(this);
                // Update data attribute for index
                $table.attr('data-table-index', tableIdx);

                // Update name/id attributes for table name input (đảm bảo là TableName)
                $table.find('.table-name-input').attr('name', `Tables[${tableIdx}].TableName`);
                $table.find('.table-name-input').attr('id', `table-name-${tableIdx}`);

                // Reindex properties within this table
                reindexProperties($table.find('.properties-container'));

                // Update accordion header/collapse IDs and data-bs-target
                $table.find('.accordion-header button').attr('data-bs-target', `#collapse-${tableIdx}`);
                $table.find('.accordion-collapse').attr('id', `collapse-${tableIdx}`);
            });
        }

        // Initial setup on document ready
        $(document).ready(function() {
            setupEventHandlers(); // Setup initial event handlers
            reindexTables(); // Initial reindex on page load if any tables exist
        });

        // Function to setup all event handlers (called on document ready and after fillTablesToUI)
        function setupEventHandlers() {
             // Remove previous delegated handlers to avoid duplicates
             $('#tablesContainer').off('change', '.property-type-input, .is-pk-checkbox, .is-fk-checkbox, .is-nullable-checkbox');
             $('#tablesContainer').off('click', '.add-property-btn, .remove-property-btn, .remove-table-btn');

             // Delegate change events for property inputs/checkboxes
             $('#tablesContainer').on('change', '.property-type-input', function() {
                const $prop = $(this).closest('.property-item');
                refreshPropertyCardUI($prop);
            });

            $('#tablesContainer').on('change', '.is-pk-checkbox, .is-fk-checkbox, .is-nullable-checkbox', function() {
                 const $prop = $(this).closest('.property-item');
                 refreshPropertyCardUI($prop);
            });

            // Delegate click events for buttons
            $('#tablesContainer').on('click', '.add-property-btn', function() {
                const propertiesContainer = $(this).closest('.accordion-body').find('.properties-container');
                const propertyTemplate = $('#propertyTemplate').html();
                const $prop = $(propertyTemplate);
                propertiesContainer.append($prop);
                refreshPropertyCardUI($prop);
                reindexProperties(propertiesContainer);
                 $('html, body').animate({
                    scrollTop: $prop.offset().top - 100
                }, 300);
            });

            $('#tablesContainer').on('click', '.remove-property-btn', function() {
                const propertiesContainer = $(this).closest('.properties-container');
                $(this).closest('.property-item').remove();
                reindexProperties(propertiesContainer);
            });

            $('#tablesContainer').on('click', '.remove-table-btn', function() {
                $(this).closest('.table-def').remove();
                reindexTables();
            });

            // Event handler for "Phân tích & Generate"
            $('#parseSqlBtn').off('click'); // Remove previous handler
            $('#parseSqlBtn').on('click', function() {
                const sql = $('#sqlInput').val();
                if (!sql.trim()) {
                    alert('Vui lòng nhập code SQL!');
                    return;
                }
                const tables = generateFromSQL(sql);
                if (tables.length === 0) {
                    alert('Không tìm thấy bảng nào trong SQL!');
                    return;
                }
                fillTablesToUI(tables);
                console.log('Kết quả generate từ SQL:', tables);
                // alert('Đã generate bảng và thuộc tính vào UI! Bạn có thể chỉnh sửa lại rồi bấm "Tạo Mã" để tải code.');
            });
        }

   // ĐỔI TÊN HÀM NÀY (bắt đầu từ khoảng dòng 1707 trong file của bạn)
// và đảm bảo các selectors bên trong là chính xác
function refreshPropertyCardUI($propJQuery) { // Đổi tên hàm và tham số
    // Quan trọng: $propJQuery ở đây PHẢI LÀ một đối tượng jQuery của một '.property-def'
    
    // Lấy giá trị từ các input/select bên trong $propJQuery
    // Đảm bảo các selector này chính xác với cấu trúc HTML của bạn trong propertyTemplate
    const dataType = $propJQuery.find('select[name$=".DataType"]').val(); 
    const isPk = $propJQuery.find('input[name$=".IsPrimaryKey"][type="checkbox"]').is(':checked');
    const isForeignKey = $propJQuery.find('input[name$=".IsForeignKey"][type="checkbox"]').is(':checked');
    // const isNullable = $propJQuery.find('input[name$=".IsNullable"][type="checkbox"]').is(':checked'); // isNullable được kiểm soát bởi PK

    const $accordionBody = $propJQuery.find('.card-body.accordion-collapse .accordion-body').first(); // Lấy accordion-body gần nhất

    // Các khu vực tùy chọn
    const $stringValidationFields = $accordionBody.find('.string-validation');
    const $numericValidationFields = $accordionBody.find('.numeric-validation');
    const $byteArrayOptions = $accordionBody.find('.byte-array-option'); // Trong phần config
    const $fkOptionsDiv = $accordionBody.find('.fk-options');

    // Ẩn/hiện các trường validation dựa trên DataType
    // (Giữ nguyên logic toggleValidationAndConfigFields nếu nó hoạt động tốt, hoặc tích hợp vào đây)
    // Ví dụ đơn giản:
    if ($stringValidationFields.length) $stringValidationFields.toggle(dataType === 'string');
    if ($numericValidationFields.length) $numericValidationFields.toggle(['int', 'long', 'decimal', 'double', 'float'].includes(dataType));
    if ($byteArrayOptions.length) $byteArrayOptions.toggle(dataType === 'byte[]');


    // Logic xử lý UI cho PK, FK, Nullable (ví dụ)
    const $isFkCheckbox = $propJQuery.find('input[name$=".IsForeignKey"][type="checkbox"]');
    const $isNullableCheckbox = $propJQuery.find('input[name$=".IsNullable"][type="checkbox"]');
    const $hiddenNullableInput = $isNullableCheckbox.siblings('input[type="hidden"][name$=".IsNullable"]');

    if (isPk) {
        $isFkCheckbox.prop('checked', false).prop('disabled', true).trigger('change'); // Trigger change để ẩn fk-options
        $isNullableCheckbox.prop('checked', false).prop('disabled', true);
    } else {
        $isFkCheckbox.prop('disabled', false);
        // Logic ẩn/hiện fkOptions đã có trong event 'change' của '.fk-checkbox', không cần lặp lại ở đây trừ khi muốn ép buộc.
        // Nếu $isFkCheckbox được check, fkOptions sẽ hiện ra.
        $isNullableCheckbox.prop('disabled', false);
    }
    
    // Cập nhật trạng thái của hidden input cho IsNullable
    $hiddenNullableInput.prop('disabled', $isNullableCheckbox.is(':checked'));
}

        $('#tablesContainer .table-def').each(function() {
            const $tableNameInput = $(this).find('.table-name-input');
            $tableNameInput.trigger('input');
        });

        $('#tablesContainer .referenced-table-dropdown').each(function() {
            if ($(this).data('select2')) {
                $(this).trigger('change.select2');
            }
        });

        // Gọi reindexTables một lần sau khi tất cả các bảng từ SQL đã được cấu hình cơ bản.
        reindexTables();

        // Trigger lại input cho tên bảng để cập nhật UI
        $('#tablesContainer .table-def').each(function() {
            const $tableNameInput = $(this).find('.table-name-input');
            $tableNameInput.trigger('input');
        });

        // Trigger lại change cho các dropdown referenced table
        $('#tablesContainer .referenced-table-dropdown').each(function() {
            if ($(this).data('select2')) {
                $(this).trigger('change.select2');
            }
        });
    </script>

    <template id="tableTemplate">
        <div class="card table-def mb-4" data-table-index="__TABLE_INDEX__">
            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                <h4 class="mb-0">Bảng __TABLE_NUMBER__: <span class="table-name-display fw-normal">Bảng __TABLE_NUMBER__</span></h4>
                <button type="button" class="btn btn-sm btn-outline-danger remove-table-btn"><i class="fas fa-trash-alt me-1"></i>Xóa Bảng</button>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label id="label_Tables___TABLE_INDEX____TableName" for="Tables___TABLE_INDEX____TableName" class="form-label">Tên Bảng</label>
                        <input type="text" id="Tables___TABLE_INDEX____TableName" name="Tables[__TABLE_INDEX__].TableName" class="form-control table-name-input" placeholder="Ví dụ: Orders" />
                        <span class="text-danger" data-valmsg-for="Tables[__TABLE_INDEX__].TableName" data-valmsg-replace="true"></span>
                    </div>
                     <div class="col-md-6 d-flex align-items-end">
                        <div class="form-check form-switch">
                            <input id="Tables___TABLE_INDEX____EnableSoftDelete_Checkbox" name="Tables[__TABLE_INDEX__].EnableSoftDelete" class="form-check-input" type="checkbox" value="true" />
                            <input type="hidden" name="Tables[__TABLE_INDEX__].EnableSoftDelete" value="false" class="softdelete-hidden-false-value" disabled />
                            <label for="Tables___TABLE_INDEX____EnableSoftDelete_Checkbox" class="form-check-label">Bật Soft Delete cho bảng này</label>
                        </div>
                    </div>
                </div>
                <div class="row mt-3 mb-2">
                    <div class="col-md-6"><h5 class="mb-0">Thuộc tính:</h5></div>
                    <div class="col-md-6">
                        <input type="text" class="form-control form-control-sm property-search-input" placeholder="Tìm thuộc tính trong bảng này..." data-table-index="__TABLE_INDEX__">
                    </div>
                </div>
                <div class="properties-container" data-table-index="__TABLE_INDEX__" id="tablesContainer___TABLE_INDEX___PropertiesContainer"></div>
                <button type="button" class="btn btn-sm btn-outline-primary add-property-btn mt-3" data-table-index="__TABLE_INDEX__"><i class="fas fa-plus me-1"></i>Thêm Thuộc Tính</button>
            </div>
        </div>
    </template>
    <template id="propertyTemplate">
        <div class="card property-def mb-3" data-property-index="__PROP_INDEX__" id="propertyDef___TABLE_INDEX_____PROP_INDEX__">
            <div class="card-header" id="headingProperty___TABLE_INDEX_____PROP_INDEX__" data-bs-toggle="collapse" data-bs-target="#collapseProperty___TABLE_INDEX_____PROP_INDEX__" aria-expanded="false" aria-controls="collapseProperty___TABLE_INDEX_____PROP_INDEX__">
                <i class="fas fa-grip-vertical grab-handle me-2"></i>
                <div class="row flex-grow-1 align-items-center g-2">
                    <div class="col-md-4 col-sm-6 prop-col">
                        <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____PropertyName" class="form-label visually-hidden">Tên</label>
                        <input type="text" id="Tables___TABLE_INDEX____Properties___PROP_INDEX____PropertyName" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].PropertyName" class="form-control form-control-sm" value="" placeholder="Tên Thuộc Tính" />
                        <span class="text-danger" data-valmsg-for="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].PropertyName" data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-3 col-sm-6 prop-col">
                        <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____DataType" class="form-label visually-hidden">Kiểu</label>
                        <select id="Tables___TABLE_INDEX____Properties___PROP_INDEX____DataType" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].DataType" class="form-select form-select-sm data-type-selector"></select>
                    </div>
                    <div class="col-md-2 col-sm-4 prop-col">
                        <div class="form-check form-switch">
                            <input id="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsPrimaryKey" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsPrimaryKey" class="form-check-input" type="checkbox" value="true" />
                            <input type="hidden" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsPrimaryKey" value="false" />
                            <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsPrimaryKey" class="form-check-label">PK?</label>
                        </div>
                    </div>
                    <div class="col-md-2 col-sm-4 prop-col">
                        <div class="form-check form-switch">
                            <input id="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsNullable" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsNullable" class="form-check-input" type="checkbox" value="true" checked/>
                            <input type="hidden" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsNullable" value="false" />
                            <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsNullable" class="form-check-label">Null?</label>
                        </div>
                    </div>
                </div>
                <button type="button" class="btn btn-sm btn-outline-danger remove-property-btn ms-2"><i class="fas fa-times"></i></button>
            </div>
            <div id="collapseProperty___TABLE_INDEX_____PROP_INDEX__" class="card-body accordion-collapse collapse" aria-labelledby="headingProperty___TABLE_INDEX_____PROP_INDEX__" data-bs-parent="#tablesContainer___TABLE_INDEX___PropertiesContainer">
                <div class="accordion mt-3" id="accordionProperty___TABLE_INDEX_____PROP_INDEX__">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingFk___TABLE_INDEX_____PROP_INDEX__">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFk___TABLE_INDEX_____PROP_INDEX__" aria-expanded="false" aria-controls="collapseFk___TABLE_INDEX_____PROP_INDEX__">
                                Khóa Ngoại & Điều Hướng
                            </button>
                        </h2>
                        <div id="collapseFk___TABLE_INDEX_____PROP_INDEX__" class="accordion-collapse collapse" aria-labelledby="headingFk___TABLE_INDEX_____PROP_INDEX__" data-bs-parent="#accordionProperty___TABLE_INDEX_____PROP_INDEX__">
                            <div class="accordion-body">
                                <div class="form-check form-switch">
                                    <input id="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsForeignKey" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsForeignKey" class="form-check-input fk-checkbox" type="checkbox" value="true" data-table-index="__TABLE_INDEX__" data-property-index="__PROP_INDEX__" />
                                    <input type="hidden" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsForeignKey" value="false" />
                                    <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsForeignKey" class="form-check-label">Là Khóa Ngoại?</label>
                                </div>
                                <div class="fk-options mt-2" id="fkOptions___TABLE_INDEX_____PROP_INDEX__" style="display:none;">
                                    <div class="row g-2">
                                        <div class="col-md-6">
                                            <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____ReferencedTableName" class="form-label">Bảng Tham Chiếu</label>
                                            <select id="Tables___TABLE_INDEX____Properties___PROP_INDEX____ReferencedTableName" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].ReferencedTableName" class="form-select form-select-sm referenced-table-dropdown"><option value="">-- Chọn Bảng --</option></select>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____NavigationPropertyName" class="form-label">Tên Thuộc Tính Điều Hướng</label>
                                            <input type="text" id="Tables___TABLE_INDEX____Properties___PROP_INDEX____NavigationPropertyName" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].NavigationPropertyName" class="form-control form-control-sm nav-prop-name-input" value="" placeholder="Tự động nếu trống"/>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____DeleteBehavior" class="form-label">Hành vi khi Xóa (FK)</label>
                                            <select id="Tables___TABLE_INDEX____Properties___PROP_INDEX____DeleteBehavior" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].DeleteBehavior" class="form-select form-select-sm delete-behavior-selector"></select>
                                        </div>
                                        <div class="col-md-6">
                                            <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____CustomFKConstraintName" class="form-label">Tên Ràng Buộc FK (DB)</label>
                                            <input type="text" id="Tables___TABLE_INDEX____Properties___PROP_INDEX____CustomFKConstraintName" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].CustomFKConstraintName" class="form-control form-control-sm" value="" placeholder="Mặc định EF Core"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingValidation___TABLE_INDEX_____PROP_INDEX__">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseValidation___TABLE_INDEX_____PROP_INDEX__" aria-expanded="false" aria-controls="collapseValidation___TABLE_INDEX_____PROP_INDEX__">
                                Tùy Chọn Xác Thực (Validation)
                            </button>
                        </h2>
                        <div id="collapseValidation___TABLE_INDEX_____PROP_INDEX__" class="accordion-collapse collapse" aria-labelledby="headingValidation___TABLE_INDEX_____PROP_INDEX__" data-bs-parent="#accordionProperty___TABLE_INDEX_____PROP_INDEX__">
                            <div class="accordion-body">
                                <div class="row validation-prop-group g-2">
                                    <div class="col-md-3 prop-col string-validation" style="display:none;">
                                        <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____MaxLength" class="form-label">Độ dài Max (String)</label>
                                        <input type="number" min="1" id="Tables___TABLE_INDEX____Properties___PROP_INDEX____MaxLength" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].MaxLength" class="form-control form-control-sm" value="" placeholder="Ví dụ: 255" />
                                    </div>
                                    <div class="col-md-3 prop-col string-validation" style="display:none;">
                                        <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____MinLength" class="form-label">Độ dài Min (String)</label>
                                        <input type="number" min="0" id="Tables___TABLE_INDEX____Properties___PROP_INDEX____MinLength" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].MinLength" class="form-control form-control-sm" value="" placeholder="Ví dụ: 0" />
                                    </div>
                                    <div class="col-md-3 prop-col numeric-validation" style="display:none;">
                                        <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____RangeMin" class="form-label">Giá trị Min (Số)</label>
                                        <input type="number" step="any" id="Tables___TABLE_INDEX____Properties___PROP_INDEX____RangeMin" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].RangeMin" class="form-control form-control-sm" value="" placeholder="Ví dụ: 0" />
                                    </div>
                                    <div class="col-md-3 prop-col numeric-validation" style="display:none;">
                                        <label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____RangeMax" class="form-label">Giá trị Max (Số)</label>
                                        <input type="number" step="any" id="Tables___TABLE_INDEX____Properties___PROP_INDEX____RangeMax" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].RangeMax" class="form-control form-control-sm" value="" placeholder="Ví dụ: 100" />
                                    </div>
                                </div>
                                <div class="row validation-prop-group mt-2 g-2">
                                    <div class="col-md-3 col-sm-6 prop-col"><div class="form-check form-switch"><input id="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsEmailAddress" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsEmailAddress" class="form-check-input" type="checkbox" value="true" /><input type="hidden" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsEmailAddress" value="false" /><label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsEmailAddress" class="form-check-label">Là Email?</label></div></div>
                                    <div class="col-md-3 col-sm-6 prop-col"><div class="form-check form-switch"><input id="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsPhoneNumber" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsPhoneNumber" class="form-check-input" type="checkbox" value="true" /><input type="hidden" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsPhoneNumber" value="false" /><label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsPhoneNumber" class="form-check-label">Là SĐT?</label></div></div>
                                    <div class="col-md-3 col-sm-6 prop-col"><div class="form-check form-switch"><input id="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsUrl" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsUrl" class="form-check-input" type="checkbox" value="true" /><input type="hidden" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsUrl" value="false" /><label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsUrl" class="form-check-label">Là URL?</label></div></div>
                                    <div class="col-md-3 col-sm-6 prop-col"><label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____RegexPattern" class="form-label">Regex Pattern</label><input type="text" id="Tables___TABLE_INDEX____Properties___PROP_INDEX____RegexPattern" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].RegexPattern" class="form-control form-control-sm" value="" placeholder="Ví dụ: ^[a-z0-9]+$" /></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingConfig___TABLE_INDEX_____PROP_INDEX__">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseConfig___TABLE_INDEX_____PROP_INDEX__" aria-expanded="false" aria-controls="collapseConfig___TABLE_INDEX_____PROP_INDEX__">
                                Tùy Chọn Cấu Hình CSDL
                            </button>
                        </h2>
                        <div id="collapseConfig___TABLE_INDEX_____PROP_INDEX__" class="accordion-collapse collapse" aria-labelledby="headingConfig___TABLE_INDEX_____PROP_INDEX__" data-bs-parent="#accordionProperty___TABLE_INDEX_____PROP_INDEX__">
                            <div class="accordion-body">
                                <div class="row config-prop-group g-2">
                                    <div class="col-md-4 prop-col"><label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____ColumnTypeName" class="form-label">Kiểu CSDL (ColumnType)</label><input type="text" id="Tables___TABLE_INDEX____Properties___PROP_INDEX____ColumnTypeName" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].ColumnTypeName" class="form-control form-control-sm" value="" placeholder="ví dụ: decimal(18,2)" /></div>
                                    <div class="col-md-4 prop-col d-flex align-items-end"><div class="form-check form-switch mb-2 byte-array-option" style="display:none;"><input id="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsTimestamp" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsTimestamp" class="form-check-input" type="checkbox" value="true" /><input type="hidden" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsTimestamp" value="false" /><label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsTimestamp" class="form-check-label">RowVersion?</label></div></div>
                                    <div class="col-md-4 prop-col d-flex align-items-end"><div class="form-check form-switch mb-2"><input id="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsConcurrencyToken" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsConcurrencyToken" class="form-check-input" type="checkbox" value="true" /><input type="hidden" name="Tables[__TABLE_INDEX__].Properties[__PROP_INDEX__].IsConcurrencyToken" value="false" /><label for="Tables___TABLE_INDEX____Properties___PROP_INDEX____IsConcurrencyToken" class="form-check-label">Concurrency Token?</label></div></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
}
